name: 'Mid Phase'
description: 'Triggers a ZAP and Nikto scan via API and fails on critical findings.'

inputs:
  target_url:
    description: 'Target GitHub repository or deployed URL'
    required: true
  user_id:
    description: 'User ID for the scan request'
    required: true
  project_id:
    description: 'Project ID for the scan request'
    required: true
  api_token:
    description: 'Bearer token for authorization'
    required: true
  pat:
    description: 'Optional GitHub PAT for private repo access'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Trigger Mid-Scan
      shell: bash
      run: |
        echo "::group::üöÄ Triggering Mid-Scan"

        JSON_PAYLOAD=$(jq -n \
          --arg url "${{ inputs.target_url }}" \
          --arg uid "${{ inputs.user_id }}" \
          --arg pid "${{ inputs.project_id }}" \
          --arg pat "${{ inputs.pat || '' }}" '
          {
            target_url: $url,
            user_id: $uid,
            project_id: $pid
          } + (if $pat != "" then { pat_token: $pat } else {} end)')

        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://secureci.clockhash.com/backend/scan/mid-request" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          -d "$JSON_PAYLOAD")

        STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        EVENT_ID=$(echo "$BODY" | jq -r '.event_id // empty')
        MESSAGE=$(echo "$BODY" | jq -r '.message // empty')

        if [ "$STATUS_CODE" != "200" ] || [ -z "$EVENT_ID" ]; then
          echo "::error::Failed to trigger scan. Message: $MESSAGE"
          exit 1
        fi

        echo "::endgroup::"
        echo "::group::‚è≥ Polling Scan Status"

        POLL_URL="https://secureci.clockhash.com/backend/scan/scan-status?event_id=$EVENT_ID&user_id=${{ inputs.user_id }}"
        ATTEMPTS=30
        INTERVAL=10
        LAST_STATUS=""

        for i in $(seq 1 $ATTEMPTS); do
          POLL_RESPONSE=$(curl -s -X GET "$POLL_URL" -H "Authorization: Bearer ${{ inputs.api_token }}")
          CURRENT_STATUS=$(echo "$POLL_RESPONSE" | jq -r '.status // empty')

          if [ "$CURRENT_STATUS" != "$LAST_STATUS" ]; then
            echo "üîÑ Status changed: $LAST_STATUS ‚û°Ô∏è $CURRENT_STATUS"
            LAST_STATUS="$CURRENT_STATUS"
          fi

          if [ "$CURRENT_STATUS" = "COMPLETED" ]; then break; fi
          if [ "$CURRENT_STATUS" = "FAILED" ]; then break; fi

          sleep $INTERVAL
        done

        REPORT_URL=$(echo "$POLL_RESPONSE" | jq -r '.report_url // empty')
        echo "::endgroup::"

        if [ "$CURRENT_STATUS" = "COMPLETED" ]; then
          echo "::notice::‚úÖ Mid-scan completed. [View Report](${REPORT_URL:-https://secureci.clockhash.com/report/$EVENT_ID})"
        elif [ "$CURRENT_STATUS" = "FAILED" ]; then
          echo "::error::‚ùå Mid-scan failed. [View Report](${REPORT_URL:-https://secureci.clockhash.com/report/$EVENT_ID})"
          exit 1
        else
          echo "::error::‚ö†Ô∏è Scan timed out. Final status: $CURRENT_STATUS"
          echo "üîó [View Report](${REPORT_URL:-https://secureci.clockhash.com/report/$EVENT_ID})"
          exit 1
        fi
