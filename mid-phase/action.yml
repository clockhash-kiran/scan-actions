name: 'Mid Phase'
description: 'Triggers a zap and nikto scan via API and fails on critical findings.'

inputs:
  target_url:
    description: 'Target GitHub repository or deployed URL'
    required: true
  user_id:
    description: 'User ID for the scan request'
    required: true
  project_id:
    description: 'Project ID for the scan request'
    required: true
  api_token:
    description: 'Bearer token for authorization'
    required: true
  pat:
    description: 'Optional GitHub PAT for private repo access'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Trigger Scans
      shell: bash
      run: |
        echo "::group::🚀 Triggering Scan Request"

        # Build JSON payload
        JSON_PAYLOAD=$(jq -n \
          --arg url "${{ inputs.target_url }}" \
          --arg uid "${{ inputs.user_id }}" \
          --arg pid "${{ inputs.project_id }}" \
          --arg pat "${{ inputs.pat || '' }}" \
          '
          {
            target_url: $url,
            user_id: $uid,
            project_id: $pid
          }
          + (if $pat != "" then { pat_token: $pat } else {} end)')

        echo "Payload prepared."

        # Send scan request
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://scan.clockhash.com/backend/scan/mid-request" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          -d "$JSON_PAYLOAD")

        STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')

        echo "::endgroup::"

        echo "::group::📡 Scan Response Summary"

        if [ -z "$BODY" ]; then
          echo "::error::Empty response body. Scan failed."
          exit 1
        fi

        STATUS=$(echo "$BODY" | jq -r '.status // empty' 2>/dev/null || echo "parse_failed")
        MESSAGE=$(echo "$BODY" | jq -r '.message // empty' 2>/dev/null || echo "parse_failed")
        REPORT_URL=$(echo "$BODY" | jq -r '.report_url // empty' 2>/dev/null || echo "parse_failed")

        echo "🟡 Status      : $STATUS"
        echo "📝 Message     : $MESSAGE"
        echo "🔗 Report URL  : $REPORT_URL"
        echo "📦 HTTP Code   : $STATUS_CODE"

        echo "::endgroup::"

        if [ "$STATUS_CODE" = "422" ] || [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "ERROR" ]; then
          echo "::error::Scan failed. See report: $REPORT_URL"
          exit 1
        fi

        echo "::notice::✅ Scan completed successfully. Report: $REPORT_URL"
