name: 'Post Phase'
description: 'Triggers a zap and nikto scan via API and fails on critical findings.'

inputs:
  target_url:
    description: 'Target GitHub repository or deployed URL'
    required: true
  user_id:
    description: 'User ID for the scan request'
    required: true
  project_id:
    description: 'Project ID for the scan request'
    required: true
  api_url:
    description: 'API URL to trigger the scan'
    required: true
  api_token:
    description: 'Bearer token for authorization'
    required: true
  scan_status_url:
    description: 'API URL to poll scan status, must accept scan_id and user_id as query params'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Trigger Scan
      shell: bash
      id: trigger
      run: |
        echo "üöÄ Triggering scan..."

        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ inputs.api_url }}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          -d '{
                "target_url": "${{ inputs.target_url }}",
                "user_id": "${{ inputs.user_id }}",
                "project_id": "${{ inputs.project_id }}"
              }')

        STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')

        SCAN_ID=$(echo "$BODY" | jq -r '.scan_id // empty')
        REPORT_URL=$(echo "$BODY" | jq -r '.report_url // empty')

        if [ -z "$SCAN_ID" ]; then
          echo "‚ùå Failed to retrieve scan ID."
          exit 1
        fi

        echo "scan_id=$SCAN_ID" >> "$GITHUB_OUTPUT"
        echo "report_url=$REPORT_URL" >> "$GITHUB_OUTPUT"

    - name: Poll Scan Status
      shell: bash
      run: |
        echo "üì° Polling scan status..."
        SCAN_ID="${{ steps.trigger.outputs.scan_id }}"
        MAX_WAIT=600  # 10 minutes
        INTERVAL=10
        ELAPSED=0

        while [ "$ELAPSED" -lt "$MAX_WAIT" ]; do
          STATUS_RESPONSE=$(curl -s -X GET "${{ inputs.scan_status_url }}?scan_id=$SCAN_ID&user_id=${{ inputs.user_id }}" \
            -H "Authorization: Bearer ${{ inputs.api_token }}")

          STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status // empty')
          echo "‚è±Ô∏è Elapsed: ${ELAPSED}s - Status: $STATUS"

          if [ "$STATUS" = "COMPLETED" ]; then
            echo "‚úÖ Scan completed."
            break
          elif [ "$STATUS" = "FAILED" ]; then
            echo "‚ùå Scan failed."
            exit 1
          fi

          sleep "$INTERVAL"
          ELAPSED=$((ELAPSED + INTERVAL))
        done

        if [ "$ELAPSED" -ge "$MAX_WAIT" ]; then
          echo "‚è∞ Timeout reached waiting for scan to complete."
          exit 1
        fi

    - name: Final Result
      shell: bash
      run: |
        echo "‚úÖ Security scan phase passed."
        echo "üìÑ Report: ${{ steps.trigger.outputs.report_url }}"
