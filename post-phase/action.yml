name: 'Post Phase'
description: 'Triggers a ZAP and Nikto scan via API and fails on critical findings.'

inputs:
  target_url:
    description: 'Target GitHub repository or deployed URL'
    required: true
  user_id:
    description: 'User ID for the scan request'
    required: true
  project_id:
    description: 'Project ID for the scan request'
    required: true
  api_token:
    description: 'Bearer token for authorization'
    required: true
  pat:
    description: 'Optional GitHub PAT for private repo access'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Trigger and Monitor Post-Scan
      shell: bash
      run: |
        echo "::group::üöÄ Triggering Post-Scan"

        JSON_PAYLOAD=$(jq -n \
          --arg url "${{ inputs.target_url }}" \
          --arg uid "${{ inputs.user_id }}" \
          --arg pid "${{ inputs.project_id }}" \
          --arg pat "${{ inputs.pat || '' }}" \
          '
          {
            target_url: $url,
            user_id: $uid,
            project_id: $pid
          }
          + (if $pat != "" then { pat_token: $pat } else {} end)')

        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://scan.clockhash.com/backend/scan/post-request" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          -d "$JSON_PAYLOAD")

        STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')

        if [ -z "$BODY" ]; then
          echo "::error::Empty response body. Scan trigger failed."
          exit 1
        fi

        EVENT_ID=$(echo "$BODY" | jq -r '.event_id // empty')
        MESSAGE=$(echo "$BODY" | jq -r '.message // empty')

        echo "üîñ Event ID   : $EVENT_ID"
        echo "üìù Message    : $MESSAGE"

        if [ "$STATUS_CODE" != "200" ] || [ -z "$EVENT_ID" ]; then
          echo "::error::Scan trigger failed. HTTP $STATUS_CODE - $MESSAGE"
          exit 1
        fi

        echo "::endgroup::"
        echo "::group::‚è≥ Polling Scan Status"

        POLL_URL="https://scan.clockhash.com/backend/scan/scan-status?event_id=$EVENT_ID&user_id=${{ inputs.user_id }}"
        ATTEMPTS=30
        INTERVAL=10
        LAST_STATUS=""

        for i in $(seq 1 $ATTEMPTS); do
          POLL_RESPONSE=$(curl -s -X GET "$POLL_URL" -H "Authorization: Bearer ${{ inputs.api_token }}")
          CURRENT_STATUS=$(echo "$POLL_RESPONSE" | jq -r '.status // empty')
          REPORT_URL=$(echo "$POLL_RESPONSE" | jq -r '.report_url // empty')

          if [ "$CURRENT_STATUS" != "$LAST_STATUS" ]; then
            echo "üîÑ Status changed: $LAST_STATUS ‚û°Ô∏è $CURRENT_STATUS"
            LAST_STATUS="$CURRENT_STATUS"
          fi

          if [ "$CURRENT_STATUS" = "COMPLETED" ]; then
            echo "::notice::‚úÖ Post-scan completed successfully."
            echo "üîó [View Report]($REPORT_URL)"
            break
          elif [ "$CURRENT_STATUS" = "FAILED" ]; then
            echo "::error::‚ùå Post-scan failed."
            echo "üîó [View Report]($REPORT_URL)"
            exit 1
          fi

          sleep $INTERVAL
        done

        echo "::endgroup::"

        if [ "$CURRENT_STATUS" != "COMPLETED" ]; then
          echo "::error::Scan timed out or did not complete."
          echo "üîó [View Report](https://scan.clockhash.com/report/$EVENT_ID)"
          exit 1
        fi
