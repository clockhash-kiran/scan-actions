name: 'Pre Phase Scan'
description: 'Triggers a pre-deployment scan and fails on critical findings.'

inputs:
  target_url:
    description: 'Target GitHub repository or deployed URL'
    required: true
  user_id:
    description: 'User ID for the scan request'
    required: true
  project_id:
    description: 'Project ID for the scan request'
    required: true
  api_token:
    description: 'Bearer token for authorization'
    required: true
  pat:
    description: 'Optional GitHub PAT for private repo access'
    required: false
  branch:
    description: 'Optional branch name'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Trigger & Monitor Pre-Scan
      shell: bash
      run: |
        echo "::group::üöÄ Triggering Pre-Scan"

        # Sanitize optional inputs
        TARGET="${{ inputs.target_url }}"
        USER_ID="${{ inputs.user_id }}"
        PROJECT_ID="${{ inputs.project_id }}"
        BRANCH="${{ inputs.branch }}"
        PAT="${{ inputs.pat }}"

        TARGET="${TARGET:-}"
        TARGET="${TARGET//null/}"
        USER_ID="${USER_ID:-}"
        USER_ID="${USER_ID//null/}"
        PROJECT_ID="${PROJECT_ID:-}"
        PROJECT_ID="${PROJECT_ID//null/}"
        BRANCH="${BRANCH:-}"
        BRANCH="${BRANCH//null/}"
        PAT="${PAT:-}"
        PAT="${PAT//null/}"

        # Build JSON payload without jq
        PAYLOAD="{\"target_url\":\"$TARGET\",\"user_id\":\"$USER_ID\",\"project_id\":\"$PROJECT_ID\""
        [ -n "$BRANCH" ] && PAYLOAD+=",\"branch\":\"$BRANCH\""
        [ -n "$PAT" ] && PAYLOAD+=",\"pat_token\":\"$PAT\""
        PAYLOAD+="}"

        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          -d "$PAYLOAD" \
          "https://secureci.clockhash.com/backend/scan/pre-request")

        STATUS=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        EVENT_ID=$(echo "$BODY" | grep -oP '"event_id"\s*:\s*"\K[^"]+')
        MESSAGE=$(echo "$BODY" | grep -oP '"message"\s*:\s*"\K[^"]*')

        if [ "$STATUS" != "200" ] || [ -z "$EVENT_ID" ]; then
          echo "::error::Failed to trigger scan: $MESSAGE"
          exit 1
        fi

        echo "::endgroup::"
        echo "::group::‚è≥ Polling Scan Status"

        POLL_URL="https://secureci.clockhash.com/backend/scan/scan-status?event_id=$EVENT_ID&user_id=$USER_ID"
        ATTEMPTS=30
        INTERVAL=10
        TOTAL_TIME=$((ATTEMPTS * INTERVAL))

        for i in $(seq 1 $ATTEMPTS); do
          POLL=$(curl -s -X GET -H "Authorization: Bearer ${{ inputs.api_token }}" "$POLL_URL")
          STATUS_NOW=$(echo "$POLL" | grep -oP '"status"\s*:\s*"\K[^"]+')

          ELAPSED=$((i * INTERVAL))
          REMAIN=$((TOTAL_TIME - ELAPSED))
          PERCENT=$(( (ELAPSED * 100) / TOTAL_TIME ))
          FILLED=$((PERCENT / 5))
          EMPTY=$((20 - FILLED))

          case "$STATUS_NOW" in
            COMPLETED) BLOCK="üü©" ;;
            FAILED) BLOCK="üü•" ;;
            *) BLOCK="üü®" ;;
          esac

          BAR="$(printf "$BLOCK%.0s" $(seq 1 $FILLED))$(printf "‚ñ´Ô∏è%.0s" $(seq 1 $EMPTY))"

          echo -ne "\r‚è≥ [$BAR] $PERCENT% | Status: $STATUS_NOW | ${ELAPSED}s / ${TOTAL_TIME}s (ETA: ${REMAIN}s)"

          if [[ "$STATUS_NOW" == "COMPLETED" || "$STATUS_NOW" == "FAILED" ]]; then
            echo ""
            break
          fi
          sleep $INTERVAL
        done

        echo "::endgroup::"
        REPORT="https://secureci.clockhash.com/summary/$EVENT_ID"

        echo ""
        echo "==============================="
        if [[ "$STATUS_NOW" == "COMPLETED" ]]; then
          echo "‚úÖ PRE-SCAN COMPLETED SUCCESSFULLY"
          echo "üîó Report: $REPORT"
          echo "==============================="
          echo "::notice::‚úÖ Pre-scan complete: [View Report]($REPORT)"
        elif [[ "$STATUS_NOW" == "FAILED" ]]; then
          echo "‚ùå PRE-SCAN FAILED"
          echo "üîó Report: $REPORT"
          echo "==============================="
          echo "::error::‚ùå Pre-scan failed: [View Report]($REPORT)"
          exit 1
        else
          echo "‚ö†Ô∏è PRE-SCAN TIMED OUT"
          echo "üîó Report: $REPORT"
          echo "==============================="
          echo "::warning::‚ö†Ô∏è Scan timed out after ${TOTAL_TIME}s. Status: $STATUS_NOW"
          exit 1
        fi
