name: 'Pre Phase'
description: 'Triggers a pre-deployment scan via API and fails on critical findings.'

inputs:
  target_url:
    description: 'Target GitHub repository or deployed URL'
    required: true
  user_id:
    description: 'User ID for the scan request'
    required: true
  project_id:
    description: 'Project ID for the scan request'
    required: true
  api_token:
    description: 'Bearer token for authorization'
    required: true
  pat:
    description: 'Optional GitHub PAT for private repo access'
    required: false
  branch:
    description: 'Optional branch name'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Trigger and Monitor Pre-Scan
      shell: bash
      run: |
        set -euo pipefail

        echo "::group::üöÄ Triggering Pre-Scan"

        BRANCH_INPUT="${{ inputs.branch || '' }}"
        PAT_INPUT="${{ inputs.pat || '' }}"

        JSON_PAYLOAD=$(jq -n \
          --arg url "${{ inputs.target_url }}" \
          --arg uid "${{ inputs.user_id }}" \
          --arg pid "${{ inputs.project_id }}" \
          --arg pat "${PAT_INPUT:-}" \
          --arg branch "${BRANCH_INPUT:-}" '
          {
            target_url: $url,
            user_id: $uid,
            project_id: $pid
          }
          + (if ($pat|length) > 0 then { pat_token: $pat } else {} end)
          + (if ($branch|length) > 0 then { branch: $branch } else {} end)')

        echo "DEBUG: Final JSON Payload:"
        echo "$JSON_PAYLOAD" | jq '.'

        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev-secureci.clockhash.com/backend/scan/pre-request" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.api_token }}" \
          -d "$JSON_PAYLOAD")

        STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')

        EVENT_ID=$(echo "$BODY" | jq -r 'try .event_id // empty')
        MESSAGE=$(echo "$BODY" | jq -r 'try .message // empty')

        if [ "$STATUS_CODE" != "200" ] || [ -z "$EVENT_ID" ]; then
          echo "::error::Failed to trigger scan. Message: ${MESSAGE:-Unknown error}"
          echo "DEBUG: Raw body -> $BODY"
          exit 1
        fi

        echo "::endgroup::"
        echo "::group::‚è≥ Polling Scan Status"

        POLL_URL="https://dev-secureci.clockhash.com/backend/scan/scan-status?event_id=$EVENT_ID&user_id=${{ inputs.user_id }}"
        ATTEMPTS=30
        INTERVAL=10
        LAST_STATUS=""
        POLL_RESPONSE=""

        # JSON validation helper
        is_json() {
          echo "$1" | jq empty >/dev/null 2>&1
        }

        for i in $(seq 1 $ATTEMPTS); do
          POLL_RESPONSE=$(curl -s -X GET "$POLL_URL" -H "Authorization: Bearer ${{ inputs.api_token }}")

          if is_json "$POLL_RESPONSE"; then
            CURRENT_STATUS=$(echo "$POLL_RESPONSE" | jq -r 'try .status // empty')
          else
            echo "‚ö†Ô∏è Non-JSON response from API (attempt $i):"
            echo "$POLL_RESPONSE"
            CURRENT_STATUS=""
          fi

          if [ "$CURRENT_STATUS" != "$LAST_STATUS" ]; then
            echo "üîÑ Status changed: $LAST_STATUS ‚û°Ô∏è $CURRENT_STATUS"
            LAST_STATUS="$CURRENT_STATUS"
          fi

          if [ "$CURRENT_STATUS" = "COMPLETED" ] || [ "$CURRENT_STATUS" = "FAILED" ]; then
            break
          fi

          sleep $INTERVAL
        done

        echo "::endgroup::"

        REPORT_URL="https://dev-secureci.clockhash.com/report/$EVENT_ID"

        if [ "$CURRENT_STATUS" = "COMPLETED" ]; then
          echo "::notice::‚úÖ Pre-scan completed. [View Report]($REPORT_URL)"
        elif [ "$CURRENT_STATUS" = "FAILED" ]; then
          echo "::error::‚ùå Pre-scan failed. [View Report]($REPORT_URL)"

          if is_json "$POLL_RESPONSE"; then
            SUMMARIES=$(echo "$POLL_RESPONSE" | jq -c 'try .scan_summaries[]? // empty')
            if [ -n "$SUMMARIES" ]; then
              echo "$SUMMARIES" | while read -r item; do
                TOOL=$(echo "$item" | jq -r 'try .tool_name // "unknown"')
                MSG=$(echo "$item" | jq -r 'try .summary.message // "no message"')
                echo "::error::[$TOOL] $MSG"
              done
            fi
          else
            echo "‚ö†Ô∏è Could not parse scan summaries (non-JSON response)."
            echo "$POLL_RESPONSE"
          fi

          exit 1
        else
          echo "::error::‚ö†Ô∏è Scan timed out after $((ATTEMPTS * INTERVAL)) seconds. Final status: $CURRENT_STATUS"
          echo "üîó [View Report]($REPORT_URL)"
          exit 1
        fi
