name: 'Pre Phase Scan'
description: 'Triggers a pre-deployment scan and fails on critical findings.'

inputs:
  target_url:
    description: 'Target GitHub repository or deployed URL'
    required: true
  user_id:
    description: 'User ID for the scan request'
    required: true
  project_id:
    description: 'Project ID for the scan request'
    required: true
  api_token:
    description: 'Bearer token for authorization'
    required: true
  pat:
    description: 'Optional GitHub PAT for private repo access'
    required: false
  branch:
    description: 'Optional branch name'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Trigger & Monitor Pre-Scan
      shell: python
      run: |
        import os, sys, json, time, requests

        TARGET = os.environ.get("INPUT_TARGET_URL", "").strip()
        USER_ID = os.environ.get("INPUT_USER_ID", "").strip()
        PROJECT_ID = os.environ.get("INPUT_PROJECT_ID", "").strip()
        BRANCH = os.environ.get("INPUT_BRANCH", "").strip()
        PAT = os.environ.get("INPUT_PAT", "").strip()
        TOKEN = os.environ.get("INPUT_API_TOKEN", "").strip()

        if not TARGET or not USER_ID or not PROJECT_ID or not TOKEN:
            print("::error::Missing required input")
            sys.exit(1)

        payload = {
            "target_url": TARGET,
            "user_id": USER_ID,
            "project_id": PROJECT_ID
        }
        if BRANCH: payload["branch"] = BRANCH
        if PAT: payload["pat_token"] = PAT

        headers = {"Authorization": f"Bearer {TOKEN}", "Content-Type": "application/json"}
        url = "https://secureci.clockhash.com/backend/scan/pre-request"

        print("::group::üöÄ Triggering Pre-Scan")
        try:
            resp = requests.post(url, headers=headers, json=payload)
            resp.raise_for_status()
            data = resp.json()
            EVENT_ID = data.get("event_id")
            MESSAGE = data.get("message", "")
            if not EVENT_ID:
                print(f"::error::Failed to trigger scan: {MESSAGE}")
                sys.exit(1)
        except Exception as e:
            print(f"::error::Failed to trigger scan: {e}")
            sys.exit(1)
        print("::endgroup::")

        print("::group::‚è≥ Polling Scan Status")
        POLL_URL = f"https://secureci.clockhash.com/backend/scan/scan-status?event_id={EVENT_ID}&user_id={USER_ID}"
        ATTEMPTS = 30
        INTERVAL = 10
        TOTAL_TIME = ATTEMPTS * INTERVAL

        STATUS_NOW = ""
        for i in range(1, ATTEMPTS+1):
            try:
                poll_resp = requests.get(POLL_URL, headers=headers)
                poll_resp.raise_for_status()
                poll_data = poll_resp.json()
                STATUS_NOW = poll_data.get("status", "")
            except Exception as e:
                print(f"Polling failed: {e}")
                STATUS_NOW = "FAILED"

            elapsed = i * INTERVAL
            remain = TOTAL_TIME - elapsed
            percent = (elapsed * 100) // TOTAL_TIME
            bar_filled = percent // 5
            bar_empty = 20 - bar_filled
            block = {"COMPLETED":"üü©","FAILED":"üü•"}.get(STATUS_NOW,"üü®")
            bar = block*bar_filled + "‚ñ´Ô∏è"*bar_empty
            print(f"\r‚è≥ [{bar}] {percent}% | Status: {STATUS_NOW} | {elapsed}s/{TOTAL_TIME}s (ETA: {remain}s)", end="")
            if STATUS_NOW in ["COMPLETED","FAILED"]:
                print()
                break
            time.sleep(INTERVAL)
        print("::endgroup::")

        REPORT = f"https://secureci.clockhash.com/summary/{EVENT_ID}"
        print("\n===============================")
        if STATUS_NOW == "COMPLETED":
            print(f"‚úÖ PRE-SCAN COMPLETED SUCCESSFULLY\nüîó Report: {REPORT}\n===============================")
            print(f"::notice::‚úÖ Pre-scan complete: [View Report]({REPORT})")
        elif STATUS_NOW == "FAILED":
            print(f"‚ùå PRE-SCAN FAILED\nüîó Report: {REPORT}\n===============================")
            print(f"::error::‚ùå Pre-scan failed: [View Report]({REPORT})")
            sys.exit(1)
        else:
            print(f"‚ö†Ô∏è PRE-SCAN TIMED OUT\nüîó Report: {REPORT}\n===============================")
            print(f"::warning::‚ö†Ô∏è Scan timed out after {TOTAL_TIME}s. Status: {STATUS_NOW}")
            sys.exit(1)
